# Copyright (C) 2024 Yixuan Kuang <kyee22@buaa.edu.cn>

.data
	N: .word 10
	a: .word 0, 1, 2, 3, 4, 5, 6, 7, 8, 9
	.str0: .byte 44, 32, 0
	.str1: .byte 10, 0

.text

prologue_main:
	addiu   $sp, $sp, -28

label0_at_main:
	# %op5 = call i32 @getint()
	li      $v0, 5
	syscall
	move    $k1, $v0

	# %op6 = call i32 @getint()
	li      $v0, 5
	syscall
	move    $k0, $v0

	# %op9 = mul i32 %op5, %op6
	mul     $k0, $k1, $k0

	# %op10 = sub i32 0, %op9
	subu    $k0, $zero, $k0

	# %op11 = call i32 @fib(i32 4)
	ori     $t0, $zero, 4
	sw      $t0, 0($sp)
	jal     prologue_fib
	move    $k1, $v0

	# %op12 = mul i32 %op10, %op11
	mul     $k1, $k0, $k1

	# %op13 = add i32 %op12, 0
	addu    $k1, $k1, $zero

	# %op14 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 1
	la      $t0, a
	ori     $t1, $zero, 4
	addu    $k0, $t0, $t1

	# %op15 = load i32, i32* %op14
	lw      $k0, 0($k0)

	# %op16 = mul i32 %op15, 1
	ori     $t0, $zero, 1
	mul     $k0, $k0, $t0

	# %op17 = add i32 %op13, %op16
	addu    $k0, $k1, $k0

	# %op18 = sub i32 %op17, 0
	subu    $k0, $k0, $zero

	# %op19 = sdiv i32 %op18, 5
	ori     $t0, $zero, 5
	div     $k0, $k0, $t0

	# %op20 = call i32 @fib(i32 5)
	ori     $t0, $zero, 5
	sw      $t0, 0($sp)
	jal     prologue_fib
	move    $k1, $v0

	# %op21 = add i32 %op20, 2
	ori     $t0, $zero, 2
	addu    $k1, $k1, $t0

	# %op22 = call i32 @fib(i32 %op21)
	sw      $k1, 0($sp)
	jal     prologue_fib
	move    $k1, $v0

	# %op23 = sub i32 1197, %op22
	ori     $t0, $zero, 1197
	subu    $k1, $t0, $k1

	# %op24 = add i32 %op23, -10091
	lui     $t0, 65535
	ori     $t0, $t0, 55445
	addu    $k1, $k1, $t0

	# %op26 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 0
	la      $t0, a
	move    $gp, $t0

	# %op27 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 0
	la      $t0, a
	move    $fp, $t0

	# %op28 = load i32, i32* %op27
	lw      $fp, 0($fp)

	# %op31 = mul i32 %op19, %op19
	mul     $k0, $k0, $k0

	# %op32 = add i32 %op28, %op31
	addu    $fp, $fp, $k0

	# store i32 %op32, i32* %op26
	sw      $fp, 0($gp)

	# %op33 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 1
	la      $t0, a
	ori     $t1, $zero, 4
	addu    $fp, $t0, $t1

	# %op34 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 1
	la      $t0, a
	ori     $t1, $zero, 4
	addu    $gp, $t0, $t1

	# %op35 = load i32, i32* %op34
	lw      $gp, 0($gp)

	# %op39 = add i32 %op35, %op31
	addu    $gp, $gp, $k0

	# store i32 %op39, i32* %op33
	sw      $gp, 0($fp)

	# %op40 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 2
	la      $t0, a
	ori     $t1, $zero, 8
	addu    $gp, $t0, $t1

	# %op41 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 2
	la      $t0, a
	ori     $t1, $zero, 8
	addu    $fp, $t0, $t1

	# %op42 = load i32, i32* %op41
	lw      $fp, 0($fp)

	# %op46 = add i32 %op42, %op31
	addu    $fp, $fp, $k0

	# store i32 %op46, i32* %op40
	sw      $fp, 0($gp)

	# %op47 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 3
	la      $t0, a
	ori     $t1, $zero, 12
	addu    $fp, $t0, $t1

	# %op48 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 3
	la      $t0, a
	ori     $t1, $zero, 12
	addu    $gp, $t0, $t1

	# %op49 = load i32, i32* %op48
	lw      $gp, 0($gp)

	# %op53 = add i32 %op49, %op31
	addu    $gp, $gp, $k0

	# store i32 %op53, i32* %op47
	sw      $gp, 0($fp)

	# %op54 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 4
	la      $t0, a
	ori     $t1, $zero, 16
	addu    $gp, $t0, $t1

	# %op55 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 4
	la      $t0, a
	ori     $t1, $zero, 16
	addu    $fp, $t0, $t1

	# %op56 = load i32, i32* %op55
	lw      $fp, 0($fp)

	# %op60 = add i32 %op56, %op31
	addu    $fp, $fp, $k0

	# store i32 %op60, i32* %op54
	sw      $fp, 0($gp)

	# %op61 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 5
	la      $t0, a
	ori     $t1, $zero, 20
	addu    $fp, $t0, $t1

	# %op62 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 5
	la      $t0, a
	ori     $t1, $zero, 20
	addu    $gp, $t0, $t1

	# %op63 = load i32, i32* %op62
	lw      $gp, 0($gp)

	# %op67 = add i32 %op63, %op31
	addu    $gp, $gp, $k0

	# store i32 %op67, i32* %op61
	sw      $gp, 0($fp)

	# %op68 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 6
	la      $t0, a
	ori     $t1, $zero, 24
	addu    $gp, $t0, $t1

	# %op69 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 6
	la      $t0, a
	ori     $t1, $zero, 24
	addu    $fp, $t0, $t1

	# %op70 = load i32, i32* %op69
	lw      $fp, 0($fp)

	# %op74 = add i32 %op70, %op31
	addu    $fp, $fp, $k0

	# store i32 %op74, i32* %op68
	sw      $fp, 0($gp)

	# %op75 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 7
	la      $t0, a
	ori     $t1, $zero, 28
	addu    $fp, $t0, $t1

	# %op76 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 7
	la      $t0, a
	ori     $t1, $zero, 28
	addu    $gp, $t0, $t1

	# %op77 = load i32, i32* %op76
	lw      $gp, 0($gp)

	# %op81 = add i32 %op77, %op31
	addu    $gp, $gp, $k0

	# store i32 %op81, i32* %op75
	sw      $gp, 0($fp)

	# %op82 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 8
	la      $t0, a
	ori     $t1, $zero, 32
	addu    $gp, $t0, $t1

	# %op83 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 8
	la      $t0, a
	ori     $t1, $zero, 32
	addu    $fp, $t0, $t1

	# %op84 = load i32, i32* %op83
	lw      $fp, 0($fp)

	# %op88 = add i32 %op84, %op31
	addu    $fp, $fp, $k0

	# store i32 %op88, i32* %op82
	sw      $fp, 0($gp)

	# %op89 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 9
	la      $t0, a
	ori     $t1, $zero, 36
	addu    $fp, $t0, $t1

	# %op90 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 9
	la      $t0, a
	ori     $t1, $zero, 36
	addu    $gp, $t0, $t1

	# %op91 = load i32, i32* %op90
	lw      $gp, 0($gp)

	# %op95 = add i32 %op91, %op31
	addu    $gp, $gp, $k0

	# store i32 %op95, i32* %op89
	sw      $gp, 0($fp)

	# mv i32 0 to %
	move    $gp, $zero

	# br label %label111
	j       label111_at_main


label96_at_main:
	# %op97 = getelementptr [2 x i8], [2 x i8]* @.str1, i32 0, i32 0
	la      $t0, .str1
	move    $fp, $t0

	# call void @putstr(i8* %op97)
	move    $a0, $fp
	li      $v0, 4
	syscall

	# call void @putint(i32 %)
	move    $a0, $gp
	li      $v0, 1
	syscall

	# %op99 = getelementptr [3 x i8], [3 x i8]* @.str0, i32 0, i32 0
	la      $t0, .str0
	move    $gp, $t0

	# call void @putstr(i8* %op99)
	move    $a0, $gp
	li      $v0, 4
	syscall

	# call void @putint(i32 %op24)
	move    $a0, $k1
	li      $v0, 1
	syscall

	# %op101 = getelementptr [3 x i8], [3 x i8]* @.str0, i32 0, i32 0
	la      $t0, .str0
	move    $k1, $t0

	# call void @putstr(i8* %op101)
	move    $a0, $k1
	li      $v0, 4
	syscall

	# call void @putint(i32 -6)
	lui     $t0, 65535
	ori     $t0, $t0, 65530
	move    $a0, $t0
	li      $v0, 1
	syscall

	# %op103 = getelementptr [2 x i8], [2 x i8]* @.str1, i32 0, i32 0
	la      $t0, .str1
	move    $k1, $t0

	# call void @putstr(i8* %op103)
	move    $a0, $k1
	li      $v0, 4
	syscall

	# ret i32 0
	li      $v0, 10
	syscall


label104_at_main:
	# %op106 = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 %
	la      $t0, a
	sll     $t1, $gp, 2
	addu    $fp, $t0, $t1

	# %op107 = load i32, i32* %op106
	lw      $fp, 0($fp)

	# call void @putint(i32 %op107)
	move    $a0, $fp
	li      $v0, 1
	syscall

	# %op108 = getelementptr [3 x i8], [3 x i8]* @.str0, i32 0, i32 0
	la      $t0, .str0
	move    $fp, $t0

	# call void @putstr(i8* %op108)
	move    $a0, $fp
	li      $v0, 4
	syscall

	# %op110 = add i32 %, 1
	ori     $t0, $zero, 1
	addu    $fp, $gp, $t0

	# mv i32 %op110 to %
	move    $gp, $fp

	# br label %label111
	j       label111_at_main


label111_at_main:
	# %op113 = icmp slt i32 %, 10
	ori     $t0, $zero, 10
	slt     $fp, $gp, $t0

	# %op114 = zext i1 %op113 to i32
	move    $fp, $fp

	# %op115 = icmp ne i32 %op114, 0
	sne     $fp, $fp, $zero

	# br i1 %op115, label %label104, label %label96
	bne     $zero, $fp, label104_at_main
	j       label96_at_main


epilogue_main:
	lw      $k1, 4($sp)
	lw      $k0, 8($sp)
	lw      $gp, 12($sp)
	lw      $fp, 16($sp)
	lw      $ra, 20($sp)
	addiu   $sp, $sp, 28
	li      $v0, 10
	syscall

prologue_fib:
	addiu   $sp, $sp, -20
	sw      $ra, 12($sp)
	sw      $k0, 8($sp)
	sw      $k1, 4($sp)

label1_at_fib:
	# br label %label5
	j       label5_at_fib


label3_at_fib:
	# ret i32 1
	ori     $t0, $zero, 1
	move    $v0, $t0
	j       epilogue_fib


label4_at_fib:
	# br label %label19
	j       label19_at_fib


label5_at_fib:
	# %op7 = icmp eq i32 %arg0, 1
	lw      $t0, 20($sp)
	ori     $t1, $zero, 1
	seq     $k1, $t0, $t1

	# %op8 = zext i1 %op7 to i32
	move    $k1, $k1

	# %op9 = icmp ne i32 %op8, 0
	sne     $k1, $k1, $zero

	# br i1 %op9, label %label3, label %label4
	bne     $zero, $k1, label3_at_fib
	j       label4_at_fib


label10_at_fib:
	# ret i32 2
	ori     $t0, $zero, 2
	move    $v0, $t0
	j       epilogue_fib


label11_at_fib:
	# %op13 = sub i32 %arg0, 1
	lw      $t0, 20($sp)
	ori     $t1, $zero, 1
	subu    $k1, $t0, $t1

	# %op14 = call i32 @fib(i32 %op13)
	sw      $k1, 0($sp)
	jal     prologue_fib
	move    $k1, $v0

	# %op16 = sub i32 %arg0, 2
	lw      $t0, 20($sp)
	ori     $t1, $zero, 2
	subu    $k0, $t0, $t1

	# %op17 = call i32 @fib(i32 %op16)
	sw      $k0, 0($sp)
	jal     prologue_fib
	move    $k0, $v0

	# %op18 = add i32 %op14, %op17
	addu    $k0, $k1, $k0

	# ret i32 %op18
	move    $v0, $k0
	j       epilogue_fib


label19_at_fib:
	# %op21 = icmp eq i32 %arg0, 2
	lw      $t0, 20($sp)
	ori     $t1, $zero, 2
	seq     $k1, $t0, $t1

	# %op22 = zext i1 %op21 to i32
	move    $k1, $k1

	# %op23 = icmp ne i32 %op22, 0
	sne     $k1, $k1, $zero

	# br i1 %op23, label %label10, label %label11
	bne     $zero, $k1, label10_at_fib
	j       label11_at_fib


epilogue_fib:
	lw      $k1, 4($sp)
	lw      $k0, 8($sp)
	lw      $ra, 12($sp)
	addiu   $sp, $sp, 20
	jr      $ra
