INTTK int
IDENFR next
LBRACK [
INTCON 10000
RBRACK ]
SEMICN ;
INTTK int
IDENFR prev
LBRACK [
INTCON 10000
RBRACK ]
SEMICN ;
INTTK int
IDENFR simulate
LPARENT (
INTTK int
IDENFR n
COMMA ,
INTTK int
IDENFR k
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR next
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IDENFR prev
LBRACK [
IDENFR i
PLUS +
INTCON 1
RBRACK ]
ASSIGN =
IDENFR i
SEMICN ;
RBRACE }
IDENFR next
LBRACK [
IDENFR n
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR prev
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR n
SEMICN ;
INTTK int
IDENFR cur
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR j
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
IDENFR i
LSS <
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR j
ASSIGN =
INTCON 1
SEMICN ;
IDENFR j
LSS <
IDENFR k
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR cur
ASSIGN =
IDENFR next
LBRACK [
IDENFR cur
RBRACK ]
SEMICN ;
RBRACE }
IDENFR prev
LBRACK [
IDENFR next
LBRACK [
IDENFR cur
RBRACK ]
RBRACK ]
ASSIGN =
IDENFR prev
LBRACK [
IDENFR cur
RBRACK ]
SEMICN ;
IDENFR next
LBRACK [
IDENFR prev
LBRACK [
IDENFR cur
RBRACK ]
RBRACK ]
ASSIGN =
IDENFR next
LBRACK [
IDENFR cur
RBRACK ]
SEMICN ;
IDENFR cur
ASSIGN =
IDENFR next
LBRACK [
IDENFR cur
RBRACK ]
SEMICN ;
RBRACE }
RETURNTK return
IDENFR cur
SEMICN ;
RBRACE }
INTTK int
IDENFR f
LPARENT (
INTTK int
IDENFR n
COMMA ,
INTTK int
IDENFR k
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR n
EQL ==
INTCON 1
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR b
ASSIGN =
IDENFR k
MOD %
IDENFR n
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR r
ASSIGN =
IDENFR f
LPARENT (
IDENFR n
MINU -
INTCON 1
COMMA ,
IDENFR k
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 0
LEQ <=
IDENFR r
AND &&
IDENFR r
LEQ <=
IDENFR n
MINU -
INTCON 2
MINU -
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR r
PLUS +
IDENFR b
PLUS +
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
IDENFR r
MINU -
LPARENT (
IDENFR n
MINU -
IDENFR b
MINU -
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR t
SEMICN ;
IDENFR t
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR n
COMMA ,
IDENFR k
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR t
SEMICN ;
RPARENT )
LBRACE {
IDENFR n
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR k
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "formula:  %d\n"
COMMA ,
IDENFR f
LPARENT (
IDENFR n
COMMA ,
IDENFR k
RPARENT )
PLUS +
INTCON 1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "simulate: %d\n"
COMMA ,
IDENFR simulate
LPARENT (
IDENFR n
COMMA ,
IDENFR k
RPARENT )
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
MINU -
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }