INTTK int
IDENFR isLeapYear
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
INTCON 0
EQL ==
IDENFR a
MOD %
INTCON 4
AND &&
IDENFR a
MOD %
INTCON 100
NEQ !=
INTCON 0
OR ||
INTCON 0
EQL ==
IDENFR a
MOD %
INTCON 400
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
INTTK int
IDENFR x
ASSIGN =
INTCON 1
PLUS +
INTCON 2
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR SimpleCond1
LPARENT (
INTTK int
IDENFR num
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR num
MOD %
INTCON 3
EQL ==
INTCON 0
OR ||
IDENFR num
MOD %
INTCON 5
EQL ==
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR SimpleCond2
LPARENT (
INTTK int
IDENFR num
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR num
MOD %
INTCON 13
EQL ==
INTCON 0
OR ||
IDENFR num
MOD %
INTCON 17
EQL ==
INTCON 0
AND &&
IDENFR num
MOD %
INTCON 19
NEQ !=
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR complexConditionCheck
LPARENT (
INTTK int
IDENFR num
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR num
GRE >
INTCON 0
AND &&
IDENFR num
LSS <
INTCON 100
AND &&
IDENFR num
MOD %
INTCON 2
EQL ==
INTCON 0
OR ||
IDENFR num
GEQ >=
INTCON 100
AND &&
IDENFR num
LSS <
INTCON 200
AND &&
IDENFR SimpleCond1
LPARENT (
IDENFR num
RPARENT )
OR ||
IDENFR num
GEQ >=
INTCON 200
AND &&
IDENFR num
LSS <
INTCON 300
AND &
IDENFR num
MOD %
INTCON 7
EQL ==
INTCON 0
AND &&
IDENFR num
MOD %
INTCON 11
NEQ !=
INTCON 0
OR ||
IDENFR num
GEQ >=
INTCON 300
AND &&
IDENFR num
LEQ <=
INTCON 400
AND &&
IDENFR SimpleCond2
LPARENT (
IDENFR num
RPARENT )
OR ||
IDENFR num
GRE >
INTCON 400
AND &&
IDENFR num
MOD %
INTCON 23
EQL ==
INTCON 0
AND &&
IDENFR num
MOD %
INTCON 29
NEQ !=
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "===========================\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "> TEST isLeapYear:\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR Year
ASSIGN =
INTCON 0
SEMICN ;
IDENFR Year
ASSIGN =
INTCON 2100
SEMICN ;
IFTK if
LPARENT (
IDENFR isLeapYear
LPARENT (
IDENFR Year
RPARENT )
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d is a leap year!!\n"
COMMA ,
IDENFR Year
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d is not a leap year!!\n"
COMMA ,
IDENFR Year
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "===========================\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "> TEST complex_conditions:\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR testNumber
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR testNumber
LEQ <=
INTCON 1000
SEMICN ;
IDENFR testNumber
ASSIGN =
IDENFR testNumber
PLUS +
INTCON 1
RPARENT )
IFTK if
LPARENT (
IDENFR complexConditionCheck
LPARENT (
IDENFR testNumber
RPARENT )
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "%d meets the complex conditions.\n"
COMMA ,
IDENFR testNumber
RPARENT )
SEMICN ;
ELSETK else
PRINTFTK printf
LPARENT (
STRCON "%d does not meet the complex conditions.\n"
COMMA ,
IDENFR testNumber
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }